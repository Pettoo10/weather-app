name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Set up image tag
      run: |
        IMAGE_TAG=$(echo "${GITHUB_SHA::7}")
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Run tests
      run: |
        python manage.py test forecast.tests

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        IMAGE_TAG=$(echo "${GITHUB_SHA::7}")
        docker build -t weather-app:${IMAGE_TAG} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        IMAGE_TAG=$(echo "${GITHUB_SHA::7}")
        docker tag weather-app:${IMAGE_TAG} ${{ secrets.DOCKER_HUB_USERNAME }}/weather-app:${IMAGE_TAG}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/weather-app:${IMAGE_TAG}

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: SSH to EC2 and run Docker container
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          IMAGE_TAG=$(echo "${{ github.sha }}")
          IMAGE_TAG=${IMAGE_TAG:0:7}
          echo "Using image tag: ${IMAGE_TAG}"
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/weather-app:${IMAGE_TAG}

          PREFIX="weather-app"
          PREVIOUS_CONTAINER=$(docker ps -aq -f "name=${PREFIX}")
    
          if [ -n "${PREVIOUS_CONTAINER}" ]; then
              echo "Stopping container: ${PREVIOUS_CONTAINER}"
              docker stop ${PREVIOUS_CONTAINER}
              echo "Removing container: ${PREVIOUS_CONTAINER}"
              docker rm ${PREVIOUS_CONTAINER}
          else
              echo "No container found with prefix: ${PREFIX}"
          fi
          echo "Running container: ${{ secrets.DOCKER_HUB_USERNAME }}/weather-app:${IMAGE_TAG}"
          
          docker run -d -p 8000:8000 --name weather-app \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/weather-app:${IMAGE_TAG}
          
          docker exec weather-app python3 manage.py makemigrations
          docker exec weather-app python3 manage.py migrate
